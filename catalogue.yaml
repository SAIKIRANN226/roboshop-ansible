- name: catalogue
  hosts: catalogue
  become: yes
  tasks:
  - name: disable old nodejs and enable nodejs  # Just search ansible dnf module
    ansible.builtin.shell: dnf module disable nodejs -y ; dnf module enable nodejs:18 -y  # If we dont find module in default ansible document then we can use shell (or) command. Here in this case "ansible.builtin.command" is not working because command ---> Wont respect target machine,shell variables and environment it is running the command outside ; shell ---> It is like you logged in inside the target machine directly and running command
    # If i login to the catalouge and run the "dnf module disable nodejs -y ; dnf module enable nodejs:18 -y" it can easily run but when you are running this outside the command it will consider these two as one command,thats why shell is slow

  - name: Install nodejs
    ansible.builtin.dnf:
      name: nodejs 
      state: present

  - name: create roboshop user
    ansible.builtin.user:
      name: roboshop

  - name: Recursively remove app directory  # Lines from 18-21 is written because if we run this multiple times again app folder will be created multiple times as we run, so if it is exists then it will delete and create again
    ansible.builtin.file:
      path: /app
      state: absent

  - name: create app directory
    ansible.builtin.file:
      path: /app
      state: directory

  - name: download catalogue application
    ansible.builtin.get_url:
      url: https://roboshop-builds.s3.amazonaws.com/catalogue.zip
      dest: /tmp

  - name: extract catalogue application
    ansible.builtin.unarchive:  
      src: /tmp/catalogue.zip
      dest: /app
      remote_src: yes    # We are just telling to ansible server(ansible controller)that we are already downloaded the file(above catalogue application)in the remote machine(catalogue),so no need to worry and no need to find in your ansible controller,it is already there in the target machine just unarchive it by giving "remote_src"

  - name: Install dependencies
    ansible.builtin.command: npm install
    args:
      chdir: /app

  - name: Copy catalogue service
    ansible.builtin.copy:
      src: catalogue.service
      dest: /etc/systemd/system/catalogue.service

  - name: deamon realod and start
    ansible.builtin.systemd_service:
      daemon_reload: true

  # Let's start after the data is loaded

  - name: Copy mongodb repo
    ansible.builtin.copy:
      src: mongodb.repo
      dest: /etc/yum.repos.d/mongodb.repo

  - name: Install mongodb client
    ansible.builtin.package:
      name: mongodb-org-shell
      state: present

  - name: get the categories count
    ansible.builtin.command:  mongo --host mongodb.daws76s.online --quiet --eval 'db = db.getSiblingDB("catalogue"); db.products.count()'  # ansible.builtin.command is nothing but running above big command in the server,take that command output in a register with a variable name(product_count)
    register: product_count # The above large command is to get the catagories count and registering the product count in a variable register

  # - name: print the count
  #   ansible.builtin.debug:
  #     msg: "product count: {{product_count}}"

  - name: load catalogue data
    ansible.builtin.command: mongo --host mongodb.daws76s.online < /app/schema/catalogue.js
    when: product_count.stdout == "0" # Keep double quotes that means if product count is 0 then only run and load the catagories otherwise ignore

  - name: start and enable catalogue
    ansible.builtin.service:
      name: catalogue
      state: restarted
      enabled: yes


# To know if catalogue is connected to mongodb or not take sudo su - then  "tail -f /var/log/messages"